<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent">

    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="panelBackgroundBrush">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFE3EFFF" Offset="0" />
            <GradientStop Color="#FFAFD2FF" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    
    <Style x:Key="GridSplitterPreviewStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}">
                        <Border BorderThickness="1,1,0,0" BorderBrush="{StaticResource ResourceKey=panelBackgroundBrush}">
                            <Canvas Width="6" Height="3">
                                <Rectangle Fill="{StaticResource ResourceKey=panelBackgroundBrush}" Width="2" Height="2" Canvas.Left="1" Canvas.Top="0" />
                                <Rectangle Fill="{StaticResource ResourceKey=panelBackgroundBrush}" Width="2" Height="2" Canvas.Left="5" Canvas.Top="0" />
                                <Rectangle Fill="{TemplateBinding TextElement.Foreground}" Width="2" Height="2" Canvas.Left="0" Canvas.Top="0" />
                                <Rectangle Fill="{TemplateBinding TextElement.Foreground}" Width="2" Height="2" Canvas.Left="4" Canvas.Top="0" />
                            </Canvas>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}">
                        <Border BorderThickness="1,1,0,0" BorderBrush="{StaticResource ResourceKey=panelBackgroundBrush}">
                            <Canvas Width="6" Height="3">
                                <Rectangle Fill="{StaticResource ResourceKey=panelBackgroundBrush}" Width="2" Height="2" Canvas.Left="1" Canvas.Top="0" />
                                <Rectangle Fill="{StaticResource ResourceKey=panelBackgroundBrush}" Width="2" Height="2" Canvas.Left="5" Canvas.Top="0" />
                                <Rectangle Fill="{TemplateBinding TextElement.Foreground}" Width="2" Height="2" Canvas.Left="0" Canvas.Top="0" />
                                <Rectangle Fill="{TemplateBinding TextElement.Foreground}" Width="2" Height="2" Canvas.Left="4" Canvas.Top="0" />
                            </Canvas>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FluentButtonStyle" TargetType="{x:Type Fluent:Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:Button}">
                    <Border x:Name="border" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Background="{DynamicResource TransparentBrush}" CornerRadius="2" HorizontalAlignment="Left" Height="Auto" VerticalAlignment="Stretch">
                        <Border x:Name="border1" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Background="{DynamicResource TransparentBrush}" CornerRadius="2" Height="Auto">
                            <Grid Height="Auto">
                                <Rectangle x:Name="rectangle" StrokeThickness="0" Visibility="Collapsed">
                                    <Rectangle.Fill>
                                        <RadialGradientBrush Center="0.503,1" GradientOrigin="0.503,1" RadiusY="0.202">
                                            <GradientStop Color="#7FFFFFFF" Offset="0"/>
                                            <GradientStop Offset="1"/>
                                        </RadialGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <StackPanel x:Name="stackPanel" Orientation="Vertical" Width="Auto">
                                    <ContentPresenter x:Name="iconImage" Opacity="0.2" RenderOptions.BitmapScalingMode="NearestNeighbor" HorizontalAlignment="Center" Height="32" Margin="3,2,3,1" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="32">
                                        <ContentPresenter.Content>
                                            <Binding Path="LargeIcon" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <Fluent:ObjectToImageConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </ContentPresenter.Content>
                                    </ContentPresenter>
                                    <Fluent:TwoLineLabel x:Name="controlLabel" Focusable="False" HorizontalAlignment="Stretch" Margin="2,-1,2,2" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" VerticalAlignment="Center"/>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Size" Value="Small">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                            <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed"/>
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                            <Setter Property="Width" TargetName="iconImage" Value="16"/>
                            <Setter Property="Height" TargetName="iconImage" Value="16"/>
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                            <Setter Property="Content" TargetName="iconImage">
                                <Setter.Value>
                                    <Binding Path="Icon" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <Fluent:ObjectToImageConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,-1,2,1"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                            <Setter Property="Width" TargetName="stackPanel" Value="Auto"/>
                            <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center"/>
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,-1,2,1"/>
                            <Setter Property="VerticalAlignment" TargetName="border" Value="Stretch"/>
                            <Setter Property="Width" TargetName="iconImage" Value="16"/>
                            <Setter Property="Height" TargetName="iconImage" Value="16"/>
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                            <Setter Property="Content" TargetName="iconImage">
                                <Setter.Value>
                                    <Binding Path="Icon" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <Fluent:ObjectToImageConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="iconImage" Value="0.2"/>
                            <Setter Property="Opacity" TargetName="controlLabel" Value="0.5"/>
                            <Setter Property="Effect" TargetName="iconImage">
                                <Setter.Value>
                                    <Fluent:GrayscaleEffect/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                            <Setter Property="Visibility" TargetName="rectangle" Value="Visible"/>
                            <Setter Property="Opacity" TargetName="iconImage" Value="1.0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Height" Value="66"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
        <Setter Property="Foreground" Value="{DynamicResource DefaultFontBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
        <Setter Property="SnapsToDevicePixels" Value="False"/>
        <Style.Triggers>
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="66"/>
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="22"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="22"/>
                <Setter Property="Width" Value="22"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SimpleButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#EEE" Offset="0.0" />
        <GradientStop Color="#CCC" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#CCC" Offset="0.0" />
        <GradientStop Color="#444" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF" Offset="0.0" />
        <GradientStop Color="#EEE" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF" Offset="0.0" />
        <GradientStop Color="#AAA" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#BBB" Offset="0.0" />
        <GradientStop Color="#EEE" Offset="0.1" />
        <GradientStop Color="#EEE" Offset="0.9" />
        <GradientStop Color="#FFF" Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#444" Offset="0.0" />
        <GradientStop Color="#888" Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <Style x:Key="EditButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource SimpleButtonFocusVisual}" />
        <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid" Width="20" Height="20">
                        <Border Name="Border">
                            <Image Name="Content" Source="/Images/Gear.png" Width="16" Height="16" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Value="{DynamicResource MouseOverBrush}" TargetName="Border" Property="Border.Background" />
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter Value="{DynamicResource PressedBrush}" TargetName="Border" Property="Border.Background" />
                            <Setter Value="{DynamicResource PressedBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background" />
                            <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>