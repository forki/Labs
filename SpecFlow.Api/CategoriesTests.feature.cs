// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.Api
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("CategoriesEndpointTests", Description="\tIn order to ensure the coding quality of the Categories endpoint \r\n\tAs a endpoin" +
        "t consumer \r\n\tI want to be able to run the following test case scenarios", SourceFile="CategoriesTests.feature", SourceLine=1)]
    public partial class CategoriesEndpointTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CategoriesTests.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CategoriesEndpointTests", "\tIn order to ensure the coding quality of the Categories endpoint \r\n\tAs a endpoin" +
                    "t consumer \r\n\tI want to be able to run the following test case scenarios", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Program",
                        "User",
                        "Password",
                        "ApiKey",
                        "TargetUrl"});
            table1.AddRow(new string[] {
                        "C:\\Program Files\\Git\\usr\\bin\\curl.exe",
                        "test.user@domain.com",
                        "test1234@",
                        "",
                        "http://localhost:3033"});
#line 9
 testRunner.Given("I provide run settings as table", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Url",
                        "Method",
                        "Headers",
                        "Payload",
                        "Property"});
            table2.AddRow(new string[] {
                        "http://localhost:3033/api/authentication/authenticate",
                        "POST",
                        "Content-Type:application/json",
                        "{\"User\":\"$user$\", \"Password\":\"$password$\", \"ApiKey\":\"$apikey$\", \"TargetUrl\":\"$tar" +
                            "geturl$\"}",
                        "Code"});
#line 12
 testRunner.And("I call the authentication endpoint with values", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Url",
                        "Method",
                        "Headers",
                        "Payload",
                        "Property"});
            table3.AddRow(new string[] {
                        "http://localhost:3033/api/authentication/token/code",
                        "POST",
                        "Content-Type:application/json",
                        "{\"Code\":\"$code$\", \"TargetUrl\":\"$targeturl$\"}",
                        "Token"});
#line 15
 testRunner.And("then call the token endpoint with values", ((string)(null)), table3, "And ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("List all categories available", new string[] {
                "ListAllCategories"}, SourceLine=19)]
        public virtual void ListAllCategoriesAvailable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all categories available", new string[] {
                        "ListAllCategories"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 21
 testRunner.Given("I have been granted with a valid access token \'Token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Url",
                        "Method",
                        "Headers",
                        "Property"});
            table4.AddRow(new string[] {
                        "http://localhost:3033/api/categories",
                        "GET",
                        "Content-Type:application/json;Authorization:$token$",
                        "ListAllCategories[Id,Name]"});
#line 22
 testRunner.When("I call the endpoint with values", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table5.AddRow(new string[] {
                        "1",
                        "Electronics"});
            table5.AddRow(new string[] {
                        "2",
                        "Outdoors"});
#line 25
 testRunner.Then("result items count should be 2 and values match the table for property \'ListAllCa" +
                    "tegories\'", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add a new category", new string[] {
                "AddCategory"}, SourceLine=30)]
        public virtual void AddANewCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a new category", new string[] {
                        "AddCategory"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 32
 testRunner.Given("I have been granted with a valid access token \'Token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Url",
                        "Method",
                        "Headers",
                        "Property",
                        "Payload"});
            table6.AddRow(new string[] {
                        "http://localhost:3033/api/categories/add",
                        "POST",
                        "Content-Type:application/json;Authorization:$token$",
                        "AddCategory(Id,Name)",
                        "{\"Name\": \"Kitchen\"}"});
#line 33
 testRunner.When("I call the endpoint with values", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table7.AddRow(new string[] {
                        "3",
                        "Kitchen"});
#line 36
 testRunner.Then("result items count should be 1 and values match the table for property \'AddCatego" +
                    "ry\'", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get an specific category", new string[] {
                "GetCategory"}, SourceLine=40)]
        public virtual void GetAnSpecificCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get an specific category", new string[] {
                        "GetCategory"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 42
 testRunner.Given("I have been granted with a valid access token \'Token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Url",
                        "Method",
                        "Headers",
                        "Property"});
            table8.AddRow(new string[] {
                        "http://localhost:3033/api/categories/3",
                        "GET",
                        "Content-Type:application/json;Authorization:$token$",
                        "GetCategory(Id,Name)"});
#line 43
 testRunner.When("I call the endpoint with values", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table9.AddRow(new string[] {
                        "3",
                        "Kitchen"});
#line 46
 testRunner.Then("result items count should be 1 and values match the table for property \'GetCatego" +
                    "ry\'", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Update a category", new string[] {
                "UpdateCategory"}, SourceLine=50)]
        public virtual void UpdateACategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a category", new string[] {
                        "UpdateCategory"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 52
 testRunner.Given("I have been granted with a valid access token \'Token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Url",
                        "Method",
                        "Headers",
                        "Property",
                        "Payload"});
            table10.AddRow(new string[] {
                        "http://localhost:3033/api/categories/update/3",
                        "PUT",
                        "Content-Type:application/json;Authorization:$token$",
                        "UpdateCategory(Id,Name)",
                        "{\"Name\":\"Gourmet Kitchen\"}"});
#line 53
 testRunner.When("I call the endpoint with values", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table11.AddRow(new string[] {
                        "3",
                        "Gourmet Kitchen"});
#line 56
 testRunner.Then("result items count should be 1 and values match the table for property \'UpdateCat" +
                    "egory\'", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete an specific category", new string[] {
                "DeleteCategory"}, SourceLine=60)]
        public virtual void DeleteAnSpecificCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete an specific category", new string[] {
                        "DeleteCategory"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 62
 testRunner.Given("I have been granted with a valid access token \'Token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Url",
                        "Method",
                        "Headers",
                        "Property"});
            table12.AddRow(new string[] {
                        "http://localhost:3033/api/categories/3",
                        "DELETE",
                        "Content-Type:application/json;Authorization:$token$",
                        "DeleteCategory(Id,Name)"});
#line 63
 testRunner.When("I call the endpoint with values", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table13.AddRow(new string[] {
                        "3",
                        "Gourmet Kitchen"});
#line 66
 testRunner.Then("result items count should be 1 and values match the table for property \'DeleteCat" +
                    "egory\'", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
