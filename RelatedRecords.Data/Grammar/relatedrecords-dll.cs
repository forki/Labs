//Generated by the GOLD Parser Builder

using System;
using System.IO;
using System.Windows.Forms;
using GOLD = GoldParser;

class MyParser
{
    private GOLD.Parser parser = new GOLD.Parser(); 

    private enum SymbolIndex
    {
        @Eof = 0,                                  // (EOF)
        @Error = 1,                                // (Error)
        @Whitespace = 2,                           // Whitespace
        @Minus = 3,                                // '-'
        @Lparen = 4,                               // '('
        @Rparen = 5,                               // ')'
        @Lt = 6,                                   // '<'
        @Lteq = 7,                                 // '<='
        @Ltgt = 8,                                 // '<>'
        @Eq = 9,                                   // '='
        @Gt = 10,                                  // '>'
        @Gteq = 11,                                // '>='
        @And = 12,                                 // and
        @As = 13,                                  // as
        @Back = 14,                                // back
        @Between = 15,                             // between
        @Catalog = 16,                             // catalog
        @Clone = 17,                               // clone
        @Columns = 18,                             // columns
        @Decimal = 19,                             // Decimal
        @Default = 20,                             // default
        @Export = 21,                              // export
        @Html = 22,                                // html
        @Identifier = 23,                          // Identifier
        @Import = 24,                              // import
        @Integer = 25,                             // Integer
        @Is = 26,                                  // is
        @Json = 27,                                // json
        @Like = 28,                                // like
        @Load = 29,                                // load
        @Newline = 30,                             // NewLine
        @Not = 31,                                 // not
        @Null = 32,                                // null
        @On = 33,                                  // on
        @Password = 34,                            // password
        @Relate = 35,                              // relate
        @Remove = 36,                              // remove
        @Root = 37,                                // root
        @Server = 38,                              // server
        @Sql = 39,                                 // sql
        @Stringliteral = 40,                       // StringLiteral
        @Table = 41,                               // table
        @Tables = 42,                              // tables
        @To = 43,                                  // to
        @Top = 44,                                 // top
        @Unrelate = 45,                            // unrelate
        @User = 46,                                // user
        @Where = 47,                               // where
        @Xml = 48,                                 // xml
        @Asexp = 49,                               // <AsExp>
        @Backexp = 50,                             // <BackExp>
        @Catalogexp = 51,                          // <CatalogExp>
        @Cloneexp = 52,                            // <CloneExp>
        @Columnsexp = 53,                          // <ColumnsExp>
        @Commandexp = 54,                          // <CommandExp>
        @Exportexp = 55,                           // <ExportExp>
        @Expression = 56,                          // <Expression>
        @Importexp = 57,                           // <ImportExp>
        @Loadexp = 58,                             // <LoadExp>
        @Negateexp = 59,                           // <Negate Exp>
        @Nl = 60,                                  // <nl>
        @Nlopt = 61,                               // <nl Opt>
        @Passwordexp = 62,                         // <PasswordExp>
        @Relateexp = 63,                           // <RelateExp>
        @Removeexp = 64,                           // <RemoveExp>
        @Rootexp = 65,                             // <RootExp>
        @Serverexp = 66,                           // <ServerExp>
        @Start = 67,                               // <Start>
        @Tableexp = 68,                            // <TableExp>
        @Tablesexp = 69,                           // <TablesExp>
        @Topnexp = 70,                             // <TopnExp>
        @Unrelateexp = 71,                         // <UnrelateExp>
        @Userexp = 72,                             // <UserExp>
        @Value = 73                                // <Value>
    }

    private enum ProductionIndex
    {
        @Nl_Newline = 0,                           // <nl> ::= NewLine <nl>
        @Nl_Newline2 = 1,                          // <nl> ::= NewLine
        @Nlopt_Newline = 2,                        // <nl Opt> ::= NewLine <nl Opt>
        @Nlopt = 3,                                // <nl Opt> ::= 
        @Start = 4,                                // <Start> ::= <nl Opt> <CommandExp> <nl Opt>
        @Commandexp = 5,                           // <CommandExp> ::= <ImportExp>
        @Commandexp2 = 6,                          // <CommandExp> ::= <CloneExp>
        @Commandexp3 = 7,                          // <CommandExp> ::= <RemoveExp>
        @Commandexp4 = 8,                          // <CommandExp> ::= <LoadExp>
        @Commandexp5 = 9,                          // <CommandExp> ::= <TableExp>
        @Commandexp6 = 10,                         // <CommandExp> ::= <RelateExp>
        @Commandexp7 = 11,                         // <CommandExp> ::= <UnrelateExp>
        @Commandexp8 = 12,                         // <CommandExp> ::= <ExportExp>
        @Commandexp9 = 13,                         // <CommandExp> ::= <BackExp>
        @Commandexp10 = 14,                        // <CommandExp> ::= <RootExp>
        @Commandexp11 = 15,                        // <CommandExp> ::= <TablesExp>
        @Commandexp12 = 16,                        // <CommandExp> ::= <ColumnsExp>
        @Commandexp13 = 17,                        // <CommandExp> ::= <TopnExp>
        @Importexp_Import = 18,                    // <ImportExp> ::= import <CatalogExp>
        @Importexp_Import2 = 19,                   // <ImportExp> ::= import <CatalogExp> <UserExp> <PasswordExp>
        @Importexp_Import3 = 20,                   // <ImportExp> ::= import <CatalogExp> <ServerExp> <UserExp> <PasswordExp>
        @Cloneexp_Clone = 21,                      // <CloneExp> ::= clone
        @Cloneexp_Clone2 = 22,                     // <CloneExp> ::= clone <CatalogExp>
        @Cloneexp_Clone3 = 23,                     // <CloneExp> ::= clone <AsExp>
        @Cloneexp_Clone4 = 24,                     // <CloneExp> ::= clone <CatalogExp> <AsExp>
        @Removeexp_Remove = 25,                    // <RemoveExp> ::= remove
        @Removeexp_Remove2 = 26,                   // <RemoveExp> ::= remove <CatalogExp>
        @Loadexp_Load = 27,                        // <LoadExp> ::= load
        @Loadexp_Load2 = 28,                       // <LoadExp> ::= load <CatalogExp>
        @Tableexp_Table = 29,                      // <TableExp> ::= table
        @Tableexp_Table_Identifier = 30,           // <TableExp> ::= table Identifier
        @Tableexp_Table_Identifier_Default = 31,   // <TableExp> ::= table Identifier default
        @Tableexp_Table_Identifier_Default_Where = 32,  // <TableExp> ::= table Identifier default where <Expression>
        @Tableexp_Table_Identifier_Where = 33,     // <TableExp> ::= table Identifier where <Expression>
        @Relateexp_Relate_To_Identifier_On_Identifier_Eq_Identifier = 34,  // <RelateExp> ::= relate to Identifier on Identifier '=' Identifier
        @Relateexp_Relate_Identifier_To_Identifier_On_Identifier_Eq_Identifier = 35,  // <RelateExp> ::= relate Identifier to Identifier on Identifier '=' Identifier
        @Unrelateexp_Unrelate_To_Identifier = 36,  // <UnrelateExp> ::= unrelate to Identifier
        @Unrelateexp_Unrelate_Identifier_To_Identifier = 37,  // <UnrelateExp> ::= unrelate Identifier to Identifier
        @Exportexp_Export_As_Sql = 38,             // <ExportExp> ::= export as sql
        @Exportexp_Export_As_Html = 39,            // <ExportExp> ::= export as html
        @Exportexp_Export_As_Json = 40,            // <ExportExp> ::= export as json
        @Exportexp_Export_As_Xml = 41,             // <ExportExp> ::= export as xml
        @Exportexp_Export_Identifier_As_Sql = 42,  // <ExportExp> ::= export Identifier as sql
        @Exportexp_Export_Identifier_As_Html = 43,  // <ExportExp> ::= export Identifier as html
        @Exportexp_Export_Identifier_As_Json = 44,  // <ExportExp> ::= export Identifier as json
        @Exportexp_Export_Identifier_As_Xml = 45,  // <ExportExp> ::= export Identifier as xml
        @Backexp_Back = 46,                        // <BackExp> ::= back
        @Rootexp_Root = 47,                        // <RootExp> ::= root
        @Tablesexp_Tables = 48,                    // <TablesExp> ::= tables
        @Tablesexp_Tables_Integer = 49,            // <TablesExp> ::= tables Integer
        @Columnsexp_Columns = 50,                  // <ColumnsExp> ::= columns
        @Columnsexp_Columns_Integer = 51,          // <ColumnsExp> ::= columns Integer
        @Topnexp_Top_Integer = 52,                 // <TopnExp> ::= top Integer
        @Catalogexp_Catalog_Identifier = 53,       // <CatalogExp> ::= catalog Identifier
        @Userexp_User_Identifier = 54,             // <UserExp> ::= user Identifier
        @Passwordexp_Password_Identifier = 55,     // <PasswordExp> ::= password Identifier
        @Serverexp_Server_Identifier = 56,         // <ServerExp> ::= server Identifier
        @Asexp_As_Identifier = 57,                 // <AsExp> ::= as Identifier
        @Expression_Gt = 58,                       // <Expression> ::= <Expression> '>' <Negate Exp>
        @Expression_Lt = 59,                       // <Expression> ::= <Expression> '<' <Negate Exp>
        @Expression_Lteq = 60,                     // <Expression> ::= <Expression> '<=' <Negate Exp>
        @Expression_Gteq = 61,                     // <Expression> ::= <Expression> '>=' <Negate Exp>
        @Expression_Eq = 62,                       // <Expression> ::= <Expression> '=' <Negate Exp>
        @Expression_Ltgt = 63,                     // <Expression> ::= <Expression> '<>' <Negate Exp>
        @Expression_Is = 64,                       // <Expression> ::= <Expression> is <Negate Exp>
        @Expression_Between_And = 65,              // <Expression> ::= <Expression> between <Negate Exp> and <Negate Exp>
        @Expression_Like_Stringliteral = 66,       // <Expression> ::= <Expression> like StringLiteral
        @Expression = 67,                          // <Expression> ::= <Negate Exp>
        @Negateexp_Minus = 68,                     // <Negate Exp> ::= '-' <Value>
        @Negateexp_Not = 69,                       // <Negate Exp> ::= not <Value>
        @Negateexp = 70,                           // <Negate Exp> ::= <Value>
        @Value_Identifier = 71,                    // <Value> ::= Identifier
        @Value_Lparen_Rparen = 72,                 // <Value> ::= '(' <Expression> ')'
        @Value_Null = 73,                          // <Value> ::= null
        @Value_Integer = 74,                       // <Value> ::= Integer
        @Value_Decimal = 75,                       // <Value> ::= Decimal
        @Value_Stringliteral = 76                  // <Value> ::= StringLiteral
    }

    public object program;     //You might derive a specific object

    public void Setup()
    {
        //This procedure can be called to load the parse tables. The class can
        //read tables using a BinaryReader.
        
        parser.LoadTables(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "grammar.egt"));
    }
    
    public bool Parse(TextReader reader)
    {
        //This procedure starts the GOLD Parser Engine and handles each of the
        //messages it returns. Each time a reduction is made, you can create new
        //custom object and reassign the .CurrentReduction property. Otherwise, 
        //the system will use the Reduction object that was returned.
        //
        //The resulting tree will be a pure representation of the language 
        //and will be ready to implement.

        GOLD.ParseMessage response; 
        bool done;                      //Controls when we leave the loop
        bool accepted = false;          //Was the parse successful?

        parser.Open(reader);
        parser.TrimReductions = false;  //Please read about this feature before enabling  

        done = false;
        while (!done)
        {
            response = parser.Parse();

            switch (response)
            {
                case GOLD.ParseMessage.LexicalError:
                    //Cannot recognize token
                    done = true;
                    break;

                case GOLD.ParseMessage.SyntaxError:
                    //Expecting a different token
                    done = true;
                    break;

                case GOLD.ParseMessage.Reduction:
                    //Create a customized object to store the reduction

                    parser.CurrentReduction = CreateNewObject(parser.CurrentReduction as GOLD.Reduction);
                    break;

                case GOLD.ParseMessage.Accept:
                    //Accepted!
                    //program = parser.CurrentReduction   //The root node!                 
                    done = true;
                    accepted = true;
                    break;

                case GOLD.ParseMessage.TokenRead:
                    //You don't have to do anything here.
                    break;

                case GOLD.ParseMessage.InternalError:
                    //INTERNAL ERROR! Something is horribly wrong.
                    done = true;
                    break;

                case GOLD.ParseMessage.NotLoadedError:
                    //This error occurs if the CGT was not loaded.                   
                    done = true;
                    break;

                case GOLD.ParseMessage.GroupError: 
                    //GROUP ERROR! Unexpected end of file
                    done = true;
                    break;
            } 
        } //while

        return accepted;
    }
    
    private object CreateNewObject(GOLD.Reduction r)
    { 
        object result = null;
        
        switch( (ProductionIndex) r.Parent.TableIndex)
        {
            case ProductionIndex.Nl_Newline:                 
                // <nl> ::= NewLine <nl>
                break;

            case ProductionIndex.Nl_Newline2:                 
                // <nl> ::= NewLine
                break;

            case ProductionIndex.Nlopt_Newline:                 
                // <nl Opt> ::= NewLine <nl Opt>
                break;

            case ProductionIndex.Nlopt:                 
                // <nl Opt> ::= 
                break;

            case ProductionIndex.Start:                 
                // <Start> ::= <nl Opt> <CommandExp> <nl Opt>
                break;

            case ProductionIndex.Commandexp:                 
                // <CommandExp> ::= <ImportExp>
                break;

            case ProductionIndex.Commandexp2:                 
                // <CommandExp> ::= <CloneExp>
                break;

            case ProductionIndex.Commandexp3:                 
                // <CommandExp> ::= <RemoveExp>
                break;

            case ProductionIndex.Commandexp4:                 
                // <CommandExp> ::= <LoadExp>
                break;

            case ProductionIndex.Commandexp5:                 
                // <CommandExp> ::= <TableExp>
                break;

            case ProductionIndex.Commandexp6:                 
                // <CommandExp> ::= <RelateExp>
                break;

            case ProductionIndex.Commandexp7:                 
                // <CommandExp> ::= <UnrelateExp>
                break;

            case ProductionIndex.Commandexp8:                 
                // <CommandExp> ::= <ExportExp>
                break;

            case ProductionIndex.Commandexp9:                 
                // <CommandExp> ::= <BackExp>
                break;

            case ProductionIndex.Commandexp10:                 
                // <CommandExp> ::= <RootExp>
                break;

            case ProductionIndex.Commandexp11:                 
                // <CommandExp> ::= <TablesExp>
                break;

            case ProductionIndex.Commandexp12:                 
                // <CommandExp> ::= <ColumnsExp>
                break;

            case ProductionIndex.Commandexp13:                 
                // <CommandExp> ::= <TopnExp>
                break;

            case ProductionIndex.Importexp_Import:                 
                // <ImportExp> ::= import <CatalogExp>
                break;

            case ProductionIndex.Importexp_Import2:                 
                // <ImportExp> ::= import <CatalogExp> <UserExp> <PasswordExp>
                break;

            case ProductionIndex.Importexp_Import3:                 
                // <ImportExp> ::= import <CatalogExp> <ServerExp> <UserExp> <PasswordExp>
                break;

            case ProductionIndex.Cloneexp_Clone:                 
                // <CloneExp> ::= clone
                break;

            case ProductionIndex.Cloneexp_Clone2:                 
                // <CloneExp> ::= clone <CatalogExp>
                break;

            case ProductionIndex.Cloneexp_Clone3:                 
                // <CloneExp> ::= clone <AsExp>
                break;

            case ProductionIndex.Cloneexp_Clone4:                 
                // <CloneExp> ::= clone <CatalogExp> <AsExp>
                break;

            case ProductionIndex.Removeexp_Remove:                 
                // <RemoveExp> ::= remove
                break;

            case ProductionIndex.Removeexp_Remove2:                 
                // <RemoveExp> ::= remove <CatalogExp>
                break;

            case ProductionIndex.Loadexp_Load:                 
                // <LoadExp> ::= load
                break;

            case ProductionIndex.Loadexp_Load2:                 
                // <LoadExp> ::= load <CatalogExp>
                break;

            case ProductionIndex.Tableexp_Table:                 
                // <TableExp> ::= table
                break;

            case ProductionIndex.Tableexp_Table_Identifier:                 
                // <TableExp> ::= table Identifier
                break;

            case ProductionIndex.Tableexp_Table_Identifier_Default:                 
                // <TableExp> ::= table Identifier default
                break;

            case ProductionIndex.Tableexp_Table_Identifier_Default_Where:                 
                // <TableExp> ::= table Identifier default where <Expression>
                break;

            case ProductionIndex.Tableexp_Table_Identifier_Where:                 
                // <TableExp> ::= table Identifier where <Expression>
                break;

            case ProductionIndex.Relateexp_Relate_To_Identifier_On_Identifier_Eq_Identifier:                 
                // <RelateExp> ::= relate to Identifier on Identifier '=' Identifier
                break;

            case ProductionIndex.Relateexp_Relate_Identifier_To_Identifier_On_Identifier_Eq_Identifier:                 
                // <RelateExp> ::= relate Identifier to Identifier on Identifier '=' Identifier
                break;

            case ProductionIndex.Unrelateexp_Unrelate_To_Identifier:                 
                // <UnrelateExp> ::= unrelate to Identifier
                break;

            case ProductionIndex.Unrelateexp_Unrelate_Identifier_To_Identifier:                 
                // <UnrelateExp> ::= unrelate Identifier to Identifier
                break;

            case ProductionIndex.Exportexp_Export_As_Sql:                 
                // <ExportExp> ::= export as sql
                break;

            case ProductionIndex.Exportexp_Export_As_Html:                 
                // <ExportExp> ::= export as html
                break;

            case ProductionIndex.Exportexp_Export_As_Json:                 
                // <ExportExp> ::= export as json
                break;

            case ProductionIndex.Exportexp_Export_As_Xml:                 
                // <ExportExp> ::= export as xml
                break;

            case ProductionIndex.Exportexp_Export_Identifier_As_Sql:                 
                // <ExportExp> ::= export Identifier as sql
                break;

            case ProductionIndex.Exportexp_Export_Identifier_As_Html:                 
                // <ExportExp> ::= export Identifier as html
                break;

            case ProductionIndex.Exportexp_Export_Identifier_As_Json:                 
                // <ExportExp> ::= export Identifier as json
                break;

            case ProductionIndex.Exportexp_Export_Identifier_As_Xml:                 
                // <ExportExp> ::= export Identifier as xml
                break;

            case ProductionIndex.Backexp_Back:                 
                // <BackExp> ::= back
                break;

            case ProductionIndex.Rootexp_Root:                 
                // <RootExp> ::= root
                break;

            case ProductionIndex.Tablesexp_Tables:                 
                // <TablesExp> ::= tables
                break;

            case ProductionIndex.Tablesexp_Tables_Integer:                 
                // <TablesExp> ::= tables Integer
                break;

            case ProductionIndex.Columnsexp_Columns:                 
                // <ColumnsExp> ::= columns
                break;

            case ProductionIndex.Columnsexp_Columns_Integer:                 
                // <ColumnsExp> ::= columns Integer
                break;

            case ProductionIndex.Topnexp_Top_Integer:                 
                // <TopnExp> ::= top Integer
                break;

            case ProductionIndex.Catalogexp_Catalog_Identifier:                 
                // <CatalogExp> ::= catalog Identifier
                break;

            case ProductionIndex.Userexp_User_Identifier:                 
                // <UserExp> ::= user Identifier
                break;

            case ProductionIndex.Passwordexp_Password_Identifier:                 
                // <PasswordExp> ::= password Identifier
                break;

            case ProductionIndex.Serverexp_Server_Identifier:                 
                // <ServerExp> ::= server Identifier
                break;

            case ProductionIndex.Asexp_As_Identifier:                 
                // <AsExp> ::= as Identifier
                break;

            case ProductionIndex.Expression_Gt:                 
                // <Expression> ::= <Expression> '>' <Negate Exp>
                break;

            case ProductionIndex.Expression_Lt:                 
                // <Expression> ::= <Expression> '<' <Negate Exp>
                break;

            case ProductionIndex.Expression_Lteq:                 
                // <Expression> ::= <Expression> '<=' <Negate Exp>
                break;

            case ProductionIndex.Expression_Gteq:                 
                // <Expression> ::= <Expression> '>=' <Negate Exp>
                break;

            case ProductionIndex.Expression_Eq:                 
                // <Expression> ::= <Expression> '=' <Negate Exp>
                break;

            case ProductionIndex.Expression_Ltgt:                 
                // <Expression> ::= <Expression> '<>' <Negate Exp>
                break;

            case ProductionIndex.Expression_Is:                 
                // <Expression> ::= <Expression> is <Negate Exp>
                break;

            case ProductionIndex.Expression_Between_And:                 
                // <Expression> ::= <Expression> between <Negate Exp> and <Negate Exp>
                break;

            case ProductionIndex.Expression_Like_Stringliteral:                 
                // <Expression> ::= <Expression> like StringLiteral
                break;

            case ProductionIndex.Expression:                 
                // <Expression> ::= <Negate Exp>
                break;

            case ProductionIndex.Negateexp_Minus:                 
                // <Negate Exp> ::= '-' <Value>
                break;

            case ProductionIndex.Negateexp_Not:                 
                // <Negate Exp> ::= not <Value>
                break;

            case ProductionIndex.Negateexp:                 
                // <Negate Exp> ::= <Value>
                break;

            case ProductionIndex.Value_Identifier:                 
                // <Value> ::= Identifier
                break;

            case ProductionIndex.Value_Lparen_Rparen:                 
                // <Value> ::= '(' <Expression> ')'
                break;

            case ProductionIndex.Value_Null:                 
                // <Value> ::= null
                break;

            case ProductionIndex.Value_Integer:                 
                // <Value> ::= Integer
                break;

            case ProductionIndex.Value_Decimal:                 
                // <Value> ::= Decimal
                break;

            case ProductionIndex.Value_Stringliteral:                 
                // <Value> ::= StringLiteral
                break;

        }  //switch

        return result;
    }
    
}; //MyParser
