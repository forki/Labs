// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Log.SpecFlow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Query Log Services Api")]
    public partial class QueryLogServicesApiFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "QueryLogServicesApi.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Query Log Services Api", "\tIn order to be able to quickly review services logs and its execution behavior\r\n" +
                    "\tAs a consumer of the log Api\r\n\tI want to query the log using several criteria s" +
                    "earches", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve entire log summary")]
        [NUnit.Framework.CategoryAttribute("logSummary")]
        public virtual void RetrieveEntireLogSummary()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve entire log summary", new string[] {
                        "logSummary"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have the proper access to the log Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I call the api endpoint url \'api/log/summary\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("a summary of the entire log is returned grouped by event level", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve log summary for a given time span")]
        [NUnit.Framework.CategoryAttribute("logSummaryForTimeSpan")]
        public virtual void RetrieveLogSummaryForAGivenTimeSpan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve log summary for a given time span", new string[] {
                        "logSummaryForTimeSpan"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I have the proper access to the log Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("I call the api endpoint url \'api/log/summary/{timeSpan}\' providing the \'timeSpan\'" +
                    " lapse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("a filtered summary of the log is returned grouped by event level", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve entire log entries")]
        [NUnit.Framework.CategoryAttribute("allLogEntries")]
        public virtual void RetrieveEntireLogEntries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve entire log entries", new string[] {
                        "allLogEntries"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have the proper access to the log Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I call the api endpoint url \'api/log/items\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("the entire log entries are returned ordered by the latest time stamps first", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve log entries for a given time span")]
        [NUnit.Framework.CategoryAttribute("logEntriesForTimeSpan")]
        public virtual void RetrieveLogEntriesForAGivenTimeSpan()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve log entries for a given time span", new string[] {
                        "logEntriesForTimeSpan"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have the proper access to the log Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("I call the api endpoint url \'api/log/items/{timeSpan}\' providing the \'timeSpan\' l" +
                    "apse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("a filtered list of log entries is returned ordered by the latest time stamps firs" +
                    "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve top n error log entries")]
        [NUnit.Framework.CategoryAttribute("topErrorEntries")]
        public virtual void RetrieveTopNErrorLogEntries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve top n error log entries", new string[] {
                        "topErrorEntries"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have the proper access to the log Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I call the api endpoint url \'api/log/top/errors/{int:count}\' providing the count " +
                    "value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("only top count of error log entries are returned ordered by the latest time stamp" +
                    "s first", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve top n critical error log entries")]
        [NUnit.Framework.CategoryAttribute("topCriticalErrorEntries")]
        public virtual void RetrieveTopNCriticalErrorLogEntries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve top n critical error log entries", new string[] {
                        "topCriticalErrorEntries"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I have the proper access to the log Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("I call the api endpoint url \'api/log/top/critical/{int:count}\' providing the coun" +
                    "t value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("only top count of critical log entries are returned ordered by the latest time st" +
                    "amps first", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve top n information log entries")]
        [NUnit.Framework.CategoryAttribute("topInformationEntries")]
        public virtual void RetrieveTopNInformationLogEntries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve top n information log entries", new string[] {
                        "topInformationEntries"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I have the proper access to the log Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.When("I call the api endpoint url \'api/log/top/information/{int:count}\' providing the c" +
                    "ount value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("only top count of information log entries are returned ordered by the latest time" +
                    " stamps first", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve top n warning log entries")]
        [NUnit.Framework.CategoryAttribute("topWarningEntries")]
        public virtual void RetrieveTopNWarningLogEntries()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve top n warning log entries", new string[] {
                        "topWarningEntries"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("I have the proper access to the log Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.When("I call the api endpoint url \'api/log/top/warning/{int:count}\' providing the count" +
                    " value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("only top count of warning log entries are returned ordered by the latest time sta" +
                    "mps first", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieve top n log entries no matter what kind of log level they are")]
        [NUnit.Framework.CategoryAttribute("topEntries")]
        public virtual void RetrieveTopNLogEntriesNoMatterWhatKindOfLogLevelTheyAre()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve top n log entries no matter what kind of log level they are", new string[] {
                        "topEntries"});
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("I have the proper access to the log Api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("I call the api endpoint url \'api/log/top/latest/{int:count}\' providing the count " +
                    "value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("only top count of any log entries are returned ordered by the latest time stamps " +
                    "first", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
