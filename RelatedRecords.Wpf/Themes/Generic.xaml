<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
                    xmlns:local="clr-namespace:RelatedRecords.Wpf.Controls">

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly=local:AppButton, ResourceId=ButtonFocusVisual}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="6,6,-2,-2"
                                   StrokeThickness="2"
                                   Stroke="Orange"
                                   StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToggleSwitch Template -->
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly=local:AppButton, ResourceId=AppButtonTemplate}"
                     TargetType="{x:Type local:AppButton}">
        <Grid  Margin="8,8,0,0">
            <!--<Border x:Name="Shadow"
                    BorderThickness="0"
                    Background="Black"
                    CornerRadius="0"
                    Opacity="0.5"
                    Margin="8,8,-8,-8"></Border>-->
            <Border x:Name="OuterBorder"
                    BorderThickness="2"
                    Background="DarkOrange"
                    CornerRadius="0">
                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0"
                                         EndPoint="1,1">
                        <GradientStop Color="#FFC125"
                                      Offset="0.45"></GradientStop>
                        <GradientStop Color="#8B5A00"
                                      Offset="0.55"></GradientStop>
                    </LinearGradientBrush>
                </Border.BorderBrush>
            </Border>
            <StackPanel>
                <TextBlock FontFamily="{TemplateBinding FontFamily}"
                       FontSize="{TemplateBinding FontSize}"
                       Margin="5"
                       Foreground="{TemplateBinding Foreground}"
                       FontWeight="{TemplateBinding FontWeight}"
                       TextAlignment="Left"
                       TextWrapping="Wrap"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Bottom"
                       Text="{TemplateBinding Content}">
                    <TextBlock.Effect>
                        <DropShadowEffect BlurRadius="2"
                                      ShadowDepth="2"
                                      Opacity="0.45"
                                      Direction="-45"></DropShadowEffect>
                    </TextBlock.Effect>
                </TextBlock>
                <TextBlock FontFamily="{TemplateBinding FontFamily}"
                       FontSize="12"
                       Margin="5"
                       Foreground="{TemplateBinding Foreground}"
                       FontWeight="{TemplateBinding FontWeight}"
                       TextAlignment="Left"
                       TextWrapping="Wrap"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Bottom"
                       Text="[Default]"
                       Visibility="{TemplateBinding IsDefaultVisibility}"/>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter TargetName="OuterBorder"
                        Property="Background"
                        Value="Orange"></Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type local:AppButton}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly=local:AppButton, ResourceId=ButtonFocusVisual}}" />
        <!--<Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="12"
                                  ShadowDepth="8"
                                  Opacity="0.9"
                                  Direction="-45"></DropShadowEffect>
            </Setter.Value>
        </Setter>-->
        <Setter Property="FontFamily"
                Value="Segoe WP"></Setter>
        <Setter Property="FontWeight"
                Value="Light"></Setter>
        <Setter Property="FontSize"
                Value="18"></Setter>
        <Setter Property="Foreground"
                Value="White"></Setter>
        <Setter Property="Template"
                Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly=local:AppButton, ResourceId=AppButtonTemplate}}" />
    </Style>

    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="panelBackgroundBrush">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFE3EFFF" Offset="0" />
            <GradientStop Color="#FFAFD2FF" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    
    <Style x:Key="GridSplitterPreviewStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}">
                        <Border BorderThickness="1,1,0,0" BorderBrush="{StaticResource ResourceKey=panelBackgroundBrush}">
                            <Canvas Width="6" Height="3">
                                <Rectangle Fill="{StaticResource ResourceKey=panelBackgroundBrush}" Width="2" Height="2" Canvas.Left="1" Canvas.Top="0" />
                                <Rectangle Fill="{StaticResource ResourceKey=panelBackgroundBrush}" Width="2" Height="2" Canvas.Left="5" Canvas.Top="0" />
                                <Rectangle Fill="{TemplateBinding TextElement.Foreground}" Width="2" Height="2" Canvas.Left="0" Canvas.Top="0" />
                                <Rectangle Fill="{TemplateBinding TextElement.Foreground}" Width="2" Height="2" Canvas.Left="4" Canvas.Top="0" />
                            </Canvas>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}">
                        <Border BorderThickness="1,1,0,0" BorderBrush="{StaticResource ResourceKey=panelBackgroundBrush}">
                            <Canvas Width="6" Height="3">
                                <Rectangle Fill="{StaticResource ResourceKey=panelBackgroundBrush}" Width="2" Height="2" Canvas.Left="1" Canvas.Top="0" />
                                <Rectangle Fill="{StaticResource ResourceKey=panelBackgroundBrush}" Width="2" Height="2" Canvas.Left="5" Canvas.Top="0" />
                                <Rectangle Fill="{TemplateBinding TextElement.Foreground}" Width="2" Height="2" Canvas.Left="0" Canvas.Top="0" />
                                <Rectangle Fill="{TemplateBinding TextElement.Foreground}" Width="2" Height="2" Canvas.Left="4" Canvas.Top="0" />
                            </Canvas>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FluentButtonStyle" TargetType="{x:Type Fluent:Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Fluent:Button}">
                    <Border x:Name="border" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Background="{DynamicResource TransparentBrush}" CornerRadius="2" HorizontalAlignment="Left" Height="Auto" VerticalAlignment="Stretch">
                        <Border x:Name="border1" BorderBrush="{DynamicResource TransparentBrush}" BorderThickness="1" Background="{DynamicResource TransparentBrush}" CornerRadius="2" Height="Auto">
                            <Grid Height="Auto">
                                <Rectangle x:Name="rectangle" StrokeThickness="0" Visibility="Collapsed">
                                    <Rectangle.Fill>
                                        <RadialGradientBrush Center="0.503,1" GradientOrigin="0.503,1" RadiusY="0.202">
                                            <GradientStop Color="#7FFFFFFF" Offset="0"/>
                                            <GradientStop Offset="1"/>
                                        </RadialGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <StackPanel x:Name="stackPanel" Orientation="Vertical" Width="Auto">
                                    <ContentPresenter x:Name="iconImage" Opacity="0.2" RenderOptions.BitmapScalingMode="NearestNeighbor" HorizontalAlignment="Center" Height="32" Margin="3,2,3,1" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="32">
                                        <ContentPresenter.Content>
                                            <Binding Path="LargeIcon" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <Fluent:ObjectToImageConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </ContentPresenter.Content>
                                    </ContentPresenter>
                                    <Fluent:TwoLineLabel x:Name="controlLabel" Focusable="False" HorizontalAlignment="Stretch" Margin="2,-1,2,2" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" VerticalAlignment="Center"/>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Size" Value="Small">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                            <Setter Property="Visibility" TargetName="controlLabel" Value="Collapsed"/>
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                            <Setter Property="Width" TargetName="iconImage" Value="16"/>
                            <Setter Property="Height" TargetName="iconImage" Value="16"/>
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                            <Setter Property="Content" TargetName="iconImage">
                                <Setter.Value>
                                    <Binding Path="Icon" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <Fluent:ObjectToImageConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,-1,2,1"/>
                        </Trigger>
                        <Trigger Property="Size" Value="Middle">
                            <Setter Property="Orientation" TargetName="stackPanel" Value="Horizontal"/>
                            <Setter Property="Width" TargetName="stackPanel" Value="Auto"/>
                            <Setter Property="VerticalAlignment" TargetName="iconImage" Value="Center"/>
                            <Setter Property="HasTwoLines" TargetName="controlLabel" Value="False"/>
                            <Setter Property="Margin" TargetName="controlLabel" Value="2,-1,2,1"/>
                            <Setter Property="VerticalAlignment" TargetName="border" Value="Stretch"/>
                            <Setter Property="Width" TargetName="iconImage" Value="16"/>
                            <Setter Property="Height" TargetName="iconImage" Value="16"/>
                            <Setter Property="Margin" TargetName="iconImage" Value="1,0,2,0"/>
                            <Setter Property="Content" TargetName="iconImage">
                                <Setter.Value>
                                    <Binding Path="Icon" RelativeSource="{RelativeSource TemplatedParent}">
                                        <Binding.Converter>
                                            <Fluent:ObjectToImageConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="VerticalAlignment" TargetName="controlLabel" Value="Center"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonPressedOuterBorderBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonPressedOuterBackgroundBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonPressedInnerBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="iconImage" Value="0.2"/>
                            <Setter Property="Opacity" TargetName="controlLabel" Value="0.5"/>
                            <Setter Property="Effect" TargetName="iconImage">
                                <Setter.Value>
                                    <Fluent:GrayscaleEffect/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                            <Setter Property="Visibility" TargetName="rectangle" Value="Visible"/>
                            <Setter Property="Opacity" TargetName="iconImage" Value="1.0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBorderBrush}"/>
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource ButtonHoverInnerBackgroundBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ButtonHoverOuterBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource ButtonHoverOuterBorderBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Height" Value="66"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}"/>
        <Setter Property="Foreground" Value="{DynamicResource DefaultFontBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}"/>
        <Setter Property="SnapsToDevicePixels" Value="False"/>
        <Style.Triggers>
            <Trigger Property="Size" Value="Large">
                <Setter Property="Height" Value="66"/>
            </Trigger>
            <Trigger Property="Size" Value="Middle">
                <Setter Property="Height" Value="22"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </Trigger>
            <Trigger Property="Size" Value="Small">
                <Setter Property="Height" Value="22"/>
                <Setter Property="Width" Value="22"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>